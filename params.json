{
  "name": "Git Changelog Lib",
  "tagline": "Library for parsing and generating a changelog, or releasenotes, from a GIT repository",
  "body": "# Git Changelog Lib [![Build Status](https://travis-ci.org/tomasbjerre/git-changelog-lib.svg?branch=master)](https://travis-ci.org/tomasbjerre/git-changelog-lib) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/se.bjurr.gitchangelog/git-changelog-lib/badge.svg)](https://maven-badges.herokuapp.com/maven-central/se.bjurr.gitchangelog/git-changelog-lib)\r\n\r\nThis is a library for generating a changelog, or releasenotes, from a GIT repository. It can also be run as a standalone program, Gradle plugin, Maven plugin or Jenkins plugin.\r\n\r\nIt is fully configurable with a [Mustache](http://mustache.github.io/) template. That can:\r\n\r\n * Be stored to file, like CHANGELOG.md. There are some templates used for testing available [here](https://github.com/tomasbjerre/git-changelog/tree/master/src/test/resources/templates) and the results [here](https://github.com/tomasbjerre/git-changelog/tree/master/src/test/resources/assertions).\r\n * Be posted to MediaWiki ([here](https://github.com/tomasbjerre/git-changelog-lib/tree/screenshots/sandbox) is an example)\r\n * Or just be printed to STDOUT\r\n\r\nIt can integrate with Jira and/or GitHub to retrieve the title of issues.\r\n\r\nThe [changelog](https://github.com/tomasbjerre/git-changelog-lib/blob/master/CHANGELOG.md) of this project is automatically generated with [this template](https://github.com/tomasbjerre/git-changelog-lib/blob/master/changelog.mustache).\r\n\r\nThere are some screenshots [here](https://github.com/tomasbjerre/git-changelog-lib/tree/screenshots/sandbox).\r\n\r\n## Usage\r\nThis software can be used:\r\n * With a [Gradle plugin](https://github.com/tomasbjerre/git-changelog-gradle-plugin).\r\n * With a [Maven plugin](https://github.com/tomasbjerre/git-changelog-maven-plugin).\r\n * With a [Jenkins plugin](https://github.com/jenkinsci/git-changelog-plugin).\r\n * With a [Bitbucket Server plugin](https://github.com/tomasbjerre/git-changelog-bitbucket-plugin).\r\n * From [command line](https://github.com/tomasbjerre/git-changelog-command-line).\r\n * As a library [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22git-changelog-lib%22).\r\n\r\nHere is an example template. There are more examples [here](https://github.com/tomasbjerre/git-changelog/tree/master/src/test/resources/templates).\r\n```\r\n# Git Changelog changelog\r\n\r\nChangelog of Git Changelog.\r\n# Git Changelog changelog\r\n\r\nChangelog of Git Changelog.\r\n\r\n{{#tags}}\r\n## {{name}}\r\n {{#issues}}\r\n  {{#hasIssue}}\r\n   {{#hasLink}}\r\n### {{name}} [{{issue}}]({{link}}) {{title}}\r\n   {{/hasLink}}\r\n   {{^hasLink}}\r\n### {{name}} {{issue}} {{title}}\r\n   {{/hasLink}}\r\n  {{/hasIssue}}\r\n  {{^hasIssue}}\r\n### {{name}}\r\n  {{/hasIssue}}\r\n\r\n  {{#commits}}\r\n**{{{messageTitle}}}**\r\n\r\n{{#messageBodyItems}}\r\n * {{.}} \r\n{{/messageBodyItems}}\r\n\r\n[{{hash}}](https://github.com/tomasbjerre/git-changelog-lib/commit/{{hash}}) {{authorName}} *{{commitTime}}*\r\n\r\n  {{/commits}}\r\n\r\n {{/issues}}\r\n{{/tags}}\r\n```\r\n\r\n## Supplied information\r\n\r\nThe template is supplied with a datastructure like:\r\n```\r\n* commits\r\n - authorName\r\n - authorEmailAddress\r\n - commitTime\r\n - message (The full message)\r\n - messageTitle (Only the first line of the message)\r\n - messageBody (Everything, except the title)\r\n * messageBodyItems (List of strings, the lines after the title)\r\n* tags\r\n - name\r\n * commits\r\n  - authorName\r\n  - authorEmailAddress\r\n  - commitTime\r\n  - message (The full message)\r\n  - messageTitle (Only the first line of the message)\r\n  - messageBody (Everything, except the title)\r\n  * messageBodyItems (List of strings, the lines after the title)\r\n * authors\r\n  - authorName\r\n  - authrorEmail\r\n  * commits\r\n   - authorName\r\n   - authorEmailAddress\r\n   - commitTime\r\n   - message (The full message)\r\n   - messageTitle (Only the first line of the message)\r\n   - messageBody (Everything, except the title)\r\n   * messageBodyItems (List of strings, the lines after the title)\r\n * issues\r\n  - name\r\n  - hasIssue\r\n  - issue\r\n  - hasLink\r\n  - link\r\n  - hasTitle\r\n  - title\r\n  * commits\r\n   - authorName\r\n   - authorEmailAddress\r\n   - commitTime\r\n   - message (The full message)\r\n   - messageTitle (Only the first line of the message)\r\n   - messageBody (Everything, except the title)\r\n   * messageBodyItems (List of strings, the lines after the title)\r\n  * authors\r\n   - authorName\r\n   - authrorEmail\r\n   * commits\r\n    - authorName\r\n    - authorEmailAddress\r\n    - commitTime\r\n    - message (The full message)\r\n    - messageTitle (Only the first line of the message)\r\n    - messageBody (Everything, except the title)\r\n    * messageBodyItems (List of strings, the lines after the title)\r\n* authors\r\n - authorName\r\n - authrorEmail\r\n * commits\r\n  - authorName\r\n  - authorEmailAddress\r\n  - commitTime\r\n  - message (The full message)\r\n  - messageTitle (Only the first line of the message)\r\n  - messageBody (Everything, except the title)\r\n  * messageBodyItems (List of strings, the lines after the title)\r\n* issues\r\n - name\r\n - hasIssue\r\n - issue\r\n - hasLink\r\n - link\r\n - hasTitle\r\n - title\r\n * commits\r\n  - authorName\r\n  - authorEmailAddress\r\n  - commitTime\r\n  - message (The full message)\r\n  - messageTitle (Only the first line of the message)\r\n  - messageBody (Everything, except the title)\r\n  * messageBodyItems (List of strings, the lines after the title)\r\n * authors\r\n  - authorName\r\n  - authrorEmail\r\n  * commits\r\n   - authorName\r\n   - authorEmailAddress\r\n   - commitTime\r\n   - message (The full message)\r\n   - messageTitle (Only the first line of the message)\r\n   - messageBody (Everything, except the title)\r\n   * messageBodyItems (List of strings, the lines after the title)\r\n```\r\n\r\n## Library\r\n\r\nIt has a [builder](https://github.com/tomasbjerre/git-changelog/blob/master/src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java) for creating the changelog.\r\n\r\n```\r\n  gitChangelogApiBuilder()\r\n   .withFromCommit(ZERO_COMMIT)\r\n   .withToRef(\"refs/heads/master\")\r\n   .withTemplatePath(\"changelog.mustache\")\r\n   .toFile(\"CHANGELOG.md\");\r\n```\r\n\r\nIt can also create releasenotes. If you are using git flow it may look like this.\r\n\r\n```\r\n  gitChangelogApiBuilder()\r\n   .withFromRef(\"refs/heads/dev\")\r\n   .withToRef(\"refs/heads/master\")\r\n   .withTemplatePath(\"releasenotes.mustache\")\r\n   .toStdout();\r\n```\r\nA page can be created in MediaWiki like this.\r\n\r\n```\r\n .toMediaWiki(\r\n  \"username\",\r\n  \"password\",\r\n  \"http://host/mediawiki\",\r\n  \"Title of page\");\r\n```\r\n\r\nSettings can be supplied with a JSON config ([documented here](https://github.com/tomasbjerre/git-changelog/blob/master/src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java)).\r\n\r\n## MediaWiki\r\nThe library can create a wiki page in MediaWiki. To do this, you must enable the API in MediaWiki in `mediawiki/LocalSettings.php` by adding:\r\n```\r\n$wgEnableAPI = true;\r\n$wgEnableWriteAPI = true;\r\n```\r\n\r\n## Developer instructions\r\n\r\nTo build the code, have a look at `.travis.yml`.\r\n\r\nTo do a release you need to do `./gradlew release` and release the artifact from [staging](https://oss.sonatype.org/#stagingRepositories). More information [here](http://central.sonatype.org/pages/releasing-the-deployment.html).\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}